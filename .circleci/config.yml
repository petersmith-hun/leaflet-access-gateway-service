version: 2.1

orbs:
  jira: circleci/jira@2.2.0
  gh: circleci/github-cli@2.7.0

# Common parameters for CircleCI build config
parameters:
  app_name:
    type: string
    default: "lags"
  release_tag_pattern:
    type: string
    default: 's/v[0-9]+\.[0-9]+\.[0-9]+\.([0-9]+)-release/\1/'
  executable_file:
    type: string
    default: "leaflet-access-gateway-exec.jar"
  executable_source_dir:
    type: string
    default: "web/target/"
  workspace_dir:
    type: string
    default: "/tmp/ws_store"
  version_file:
    type: string
    default: "version"

# Reusable commands
commands:

  # Command definition for publishing GitHub releases/tags
  github_release:
    parameters:
      release-type:
        type: enum
        default: "rc"
        enum: [ "rc", "release" ]
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_dir >>
      - gh/setup
      - run:
          name: "Publish Release on GitHub"
          command: |
            [[ "<< parameters.release-type >>" = "release" ]] && VERSION_QUALIFIER="-release" || VERSION_QUALIFIER=""
            VERSION=v$(cat << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.version_file >>)$VERSION_QUALIFIER
            gh release create ${VERSION} --target ${CIRCLE_SHA1} --title ${VERSION} << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.executable_file >>

executors:
  java:
    docker:
      - image: cimg/openjdk:21.0
  python:
    docker:
      - image: cimg/python:3.12
  base:
    docker:
      - image: cimg/base:stable

jobs:

  # Leaflet Access Gateway Service - Build and test application
  build:
    executor: java
    steps:
      - checkout
      - run:
          command: |
            case $CIRCLE_BRANCH in
              master) echo 'export BUILD_NUMBER="rc.<< pipeline.number >>"' >> $BASH_ENV ;;
              deploy) echo 'export BUILD_NUMBER=$((`git fetch --tags && git tag --sort=-taggerdate | grep release | sed -E "<< pipeline.parameters.release_tag_pattern >>" | sort -nr | head -n 1` + 1))' >> $BASH_ENV ;;
              *) echo 'export BUILD_NUMBER="snapshot"' >> $BASH_ENV ;;
            esac
            source $BASH_ENV
            echo "Determined BUILD_NUMBER=$BUILD_NUMBER"
          name: Set build number
      - run:
          command: mvn build-helper:parse-version versions:set -DnewVersion="\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.incrementalVersion}.${BUILD_NUMBER}" -s .circleci/settings.xml
          name: Set project version
      - run:
          command: echo 'export PROJECT_VERSION=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout --non-recursive -s .circleci/settings.xml`' >> $BASH_ENV
          name: Extract project version
      - setup_remote_docker
      - run:
          command: mvn clean install -s .circleci/settings.xml
          name: Build
      - run:
          command: mvn -pl acceptance -Pacceptance verify -s .circleci/settings.xml
          name: Run acceptance tests
      - run:
          command: |
            mvn -pl web dockerfile:push@tag-with-project-version -s .circleci/settings.xml -Ddocker.skip-latest=true
            if [[ $CIRCLE_BRANCH == "deploy" ]]; then
              mvn -pl web dockerfile:push@tag-with-latest -s .circleci/settings.xml -Ddocker.skip-latest=false
            fi
          name: Push Docker image
      - run:
          command: |
            mkdir -p << pipeline.parameters.workspace_dir >>
            cp ./<< pipeline.parameters.executable_source_dir >><< pipeline.parameters.executable_file >> << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.executable_file >>
            echo $PROJECT_VERSION >> << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.version_file >>
          name: Prepare workspace shared storage
      - persist_to_workspace:
          root: << pipeline.parameters.workspace_dir >>
          paths:
            - << pipeline.parameters.executable_file >>
            - << pipeline.parameters.version_file >>
      - store_artifacts:
          path: << pipeline.parameters.executable_source_dir >><< pipeline.parameters.executable_file >>
      - store_test_results:
          path: web/target/surefire-reports
      - store_test_results:
          path: core/target/surefire-reports

  # Leaflet Access Gateway Service - Deploy to production
  deploy:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: << pipeline.parameters.workspace_dir >>
      - run:
          command: echo 'export PROJECT_VERSION="$(cat << pipeline.parameters.workspace_dir >>/<< pipeline.parameters.version_file >>)"' >> $BASH_ENV
          name: Set project version
      - run:
          command: pip install domino-cli
          name: Install Domino CLI
      - run:
          command: |
            set -e
            
            echo "Using predefined access token"
            
            domino-cli --cicd import
            echo "Deployment definition successfully imported"
            
            domino-cli --cicd deploy << pipeline.parameters.app_name >> ${PROJECT_VERSION}
            echo "Successfully deployed application << pipeline.parameters.app_name >> v${PROJECT_VERSION}"
            
            domino-cli --cicd start << pipeline.parameters.app_name >>
            echo "Successfully started application << pipeline.parameters.app_name >>"

          name: Deploy via Domino

  # Leaflet Access Gateway Service - Publish tag (and release) on GitHub for RC versions
  publish-github-rc:
    executor: base
    steps:
      - github_release:
          release-type: rc

  # Leaflet Access Gateway Service - Publish tag (and release) on GitHub for RELEASE versions
  publish-github-release:
    executor: base
    steps:
      - github_release:
          release-type: release

workflows:

  leaflet-lags-rc:
    jobs:

      - build:
          context:
            - common-tech
            - docker-registry
            - github-packages
          filters:
            branches:
              only:
                - master
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>

      - publish-github-rc:
          context:
            - common-tech
          requires:
            - build

  leaflet-lags-release:
    jobs:

      - build:
          context:
            - common-tech
            - docker-registry
            - github-packages
          filters:
            branches:
              only:
                - deploy
          post-steps:
            - jira/notify:
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>

      - deploy-approval:
          type: approval
          requires:
            - build

      - deploy:
          context:
            - common-tech
            - domino-direct-auth
          requires:
            - deploy-approval
          post-steps:
            - jira/notify:
                environment: production
                environment_type: production
                job_type: deployment
                pipeline_id: << pipeline.id >>
                pipeline_number: << pipeline.number >>

      - publish-github-release:
          context:
            - common-tech
          requires:
            - deploy

  version: 2
